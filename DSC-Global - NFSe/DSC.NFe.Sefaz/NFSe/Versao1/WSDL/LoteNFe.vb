'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:4.0.30319.42000
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by wsdl, Version=4.7.2046.0.
'
Namespace Nfse.Versao1.WSDL.LoteNfe

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code"),
 System.Web.Services.WebServiceBindingAttribute(Name:="LoteNFeSoap", [Namespace]:="http://www.prefeitura.sp.gov.br/nfe")>
    Partial Public Class LoteNFe
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private EnvioRPSOperationCompleted As System.Threading.SendOrPostCallback

        Private EnvioLoteRPSOperationCompleted As System.Threading.SendOrPostCallback

        Private TesteEnvioLoteRPSOperationCompleted As System.Threading.SendOrPostCallback

        Private CancelamentoNFeOperationCompleted As System.Threading.SendOrPostCallback

        Private ConsultaNFeOperationCompleted As System.Threading.SendOrPostCallback

        Private ConsultaNFeRecebidasOperationCompleted As System.Threading.SendOrPostCallback

        Private ConsultaNFeEmitidasOperationCompleted As System.Threading.SendOrPostCallback

        Private ConsultaLoteOperationCompleted As System.Threading.SendOrPostCallback

        Private ConsultaInformacoesLoteOperationCompleted As System.Threading.SendOrPostCallback

        Private ConsultaCNPJOperationCompleted As System.Threading.SendOrPostCallback

        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "https://nfe.prefeitura.sp.gov.br/ws/lotenfe.asmx"
        End Sub

        '''<remarks/>
        Public Event EnvioRPSCompleted As EnvioRPSCompletedEventHandler

        '''<remarks/>
        Public Event EnvioLoteRPSCompleted As EnvioLoteRPSCompletedEventHandler

        '''<remarks/>
        Public Event TesteEnvioLoteRPSCompleted As TesteEnvioLoteRPSCompletedEventHandler

        '''<remarks/>
        Public Event CancelamentoNFeCompleted As CancelamentoNFeCompletedEventHandler

        '''<remarks/>
        Public Event ConsultaNFeCompleted As ConsultaNFeCompletedEventHandler

        '''<remarks/>
        Public Event ConsultaNFeRecebidasCompleted As ConsultaNFeRecebidasCompletedEventHandler

        '''<remarks/>
        Public Event ConsultaNFeEmitidasCompleted As ConsultaNFeEmitidasCompletedEventHandler

        '''<remarks/>
        Public Event ConsultaLoteCompleted As ConsultaLoteCompletedEventHandler

        '''<remarks/>
        Public Event ConsultaInformacoesLoteCompleted As ConsultaInformacoesLoteCompletedEventHandler

        '''<remarks/>
        Public Event ConsultaCNPJCompleted As ConsultaCNPJCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/envioRPS", RequestElementName:="EnvioRPSRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function EnvioRPS(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("EnvioRPS", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginEnvioRPS(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EnvioRPS", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndEnvioRPS(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub EnvioRPSAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.EnvioRPSAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EnvioRPSAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.EnvioRPSOperationCompleted Is Nothing) Then
                Me.EnvioRPSOperationCompleted = AddressOf Me.OnEnvioRPSOperationCompleted
            End If
            Me.InvokeAsync("EnvioRPS", New Object() {VersaoSchema, MensagemXML}, Me.EnvioRPSOperationCompleted, userState)
        End Sub

        Private Sub OnEnvioRPSOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnvioRPSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnvioRPSCompleted(Me, New EnvioRPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/envioLoteRPS", RequestElementName:="EnvioLoteRPSRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function EnvioLoteRPS(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("EnvioLoteRPS", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginEnvioLoteRPS(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EnvioLoteRPS", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndEnvioLoteRPS(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub EnvioLoteRPSAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.EnvioLoteRPSAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EnvioLoteRPSAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.EnvioLoteRPSOperationCompleted Is Nothing) Then
                Me.EnvioLoteRPSOperationCompleted = AddressOf Me.OnEnvioLoteRPSOperationCompleted
            End If
            Me.InvokeAsync("EnvioLoteRPS", New Object() {VersaoSchema, MensagemXML}, Me.EnvioLoteRPSOperationCompleted, userState)
        End Sub

        Private Sub OnEnvioLoteRPSOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnvioLoteRPSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnvioLoteRPSCompleted(Me, New EnvioLoteRPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/testeenvio", RequestElementName:="TesteEnvioLoteRPSRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function TesteEnvioLoteRPS(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("TesteEnvioLoteRPS", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginTesteEnvioLoteRPS(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TesteEnvioLoteRPS", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTesteEnvioLoteRPS(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub TesteEnvioLoteRPSAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.TesteEnvioLoteRPSAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TesteEnvioLoteRPSAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.TesteEnvioLoteRPSOperationCompleted Is Nothing) Then
                Me.TesteEnvioLoteRPSOperationCompleted = AddressOf Me.OnTesteEnvioLoteRPSOperationCompleted
            End If
            Me.InvokeAsync("TesteEnvioLoteRPS", New Object() {VersaoSchema, MensagemXML}, Me.TesteEnvioLoteRPSOperationCompleted, userState)
        End Sub

        Private Sub OnTesteEnvioLoteRPSOperationCompleted(ByVal arg As Object)
            If (Not (Me.TesteEnvioLoteRPSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TesteEnvioLoteRPSCompleted(Me, New TesteEnvioLoteRPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/cancelamentoNFe", RequestElementName:="CancelamentoNFeRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function CancelamentoNFe(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("CancelamentoNFe", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginCancelamentoNFe(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelamentoNFe", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCancelamentoNFe(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub CancelamentoNFeAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.CancelamentoNFeAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CancelamentoNFeAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.CancelamentoNFeOperationCompleted Is Nothing) Then
                Me.CancelamentoNFeOperationCompleted = AddressOf Me.OnCancelamentoNFeOperationCompleted
            End If
            Me.InvokeAsync("CancelamentoNFe", New Object() {VersaoSchema, MensagemXML}, Me.CancelamentoNFeOperationCompleted, userState)
        End Sub

        Private Sub OnCancelamentoNFeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelamentoNFeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelamentoNFeCompleted(Me, New CancelamentoNFeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/consultaNFe", RequestElementName:="ConsultaNFeRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function ConsultaNFe(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("ConsultaNFe", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginConsultaNFe(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsultaNFe", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndConsultaNFe(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ConsultaNFeAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.ConsultaNFeAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ConsultaNFeAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.ConsultaNFeOperationCompleted Is Nothing) Then
                Me.ConsultaNFeOperationCompleted = AddressOf Me.OnConsultaNFeOperationCompleted
            End If
            Me.InvokeAsync("ConsultaNFe", New Object() {VersaoSchema, MensagemXML}, Me.ConsultaNFeOperationCompleted, userState)
        End Sub

        Private Sub OnConsultaNFeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaNFeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaNFeCompleted(Me, New ConsultaNFeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/consultaNFeRecebidas", RequestElementName:="ConsultaNFeRecebidasRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function ConsultaNFeRecebidas(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("ConsultaNFeRecebidas", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginConsultaNFeRecebidas(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsultaNFeRecebidas", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndConsultaNFeRecebidas(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ConsultaNFeRecebidasAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.ConsultaNFeRecebidasAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ConsultaNFeRecebidasAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.ConsultaNFeRecebidasOperationCompleted Is Nothing) Then
                Me.ConsultaNFeRecebidasOperationCompleted = AddressOf Me.OnConsultaNFeRecebidasOperationCompleted
            End If
            Me.InvokeAsync("ConsultaNFeRecebidas", New Object() {VersaoSchema, MensagemXML}, Me.ConsultaNFeRecebidasOperationCompleted, userState)
        End Sub

        Private Sub OnConsultaNFeRecebidasOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaNFeRecebidasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaNFeRecebidasCompleted(Me, New ConsultaNFeRecebidasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/consultaNFeEmitidas", RequestElementName:="ConsultaNFeEmitidasRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function ConsultaNFeEmitidas(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("ConsultaNFeEmitidas", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginConsultaNFeEmitidas(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsultaNFeEmitidas", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndConsultaNFeEmitidas(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ConsultaNFeEmitidasAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.ConsultaNFeEmitidasAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ConsultaNFeEmitidasAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.ConsultaNFeEmitidasOperationCompleted Is Nothing) Then
                Me.ConsultaNFeEmitidasOperationCompleted = AddressOf Me.OnConsultaNFeEmitidasOperationCompleted
            End If
            Me.InvokeAsync("ConsultaNFeEmitidas", New Object() {VersaoSchema, MensagemXML}, Me.ConsultaNFeEmitidasOperationCompleted, userState)
        End Sub

        Private Sub OnConsultaNFeEmitidasOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaNFeEmitidasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaNFeEmitidasCompleted(Me, New ConsultaNFeEmitidasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/consultaLote", RequestElementName:="ConsultaLoteRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function ConsultaLote(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("ConsultaLote", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginConsultaLote(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsultaLote", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndConsultaLote(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ConsultaLoteAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.ConsultaLoteAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ConsultaLoteAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.ConsultaLoteOperationCompleted Is Nothing) Then
                Me.ConsultaLoteOperationCompleted = AddressOf Me.OnConsultaLoteOperationCompleted
            End If
            Me.InvokeAsync("ConsultaLote", New Object() {VersaoSchema, MensagemXML}, Me.ConsultaLoteOperationCompleted, userState)
        End Sub

        Private Sub OnConsultaLoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaLoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaLoteCompleted(Me, New ConsultaLoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/consultaInformacoesLote", RequestElementName:="ConsultaInformacoesLoteRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function ConsultaInformacoesLote(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("ConsultaInformacoesLote", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginConsultaInformacoesLote(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsultaInformacoesLote", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndConsultaInformacoesLote(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ConsultaInformacoesLoteAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.ConsultaInformacoesLoteAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ConsultaInformacoesLoteAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.ConsultaInformacoesLoteOperationCompleted Is Nothing) Then
                Me.ConsultaInformacoesLoteOperationCompleted = AddressOf Me.OnConsultaInformacoesLoteOperationCompleted
            End If
            Me.InvokeAsync("ConsultaInformacoesLote", New Object() {VersaoSchema, MensagemXML}, Me.ConsultaInformacoesLoteOperationCompleted, userState)
        End Sub

        Private Sub OnConsultaInformacoesLoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaInformacoesLoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaInformacoesLoteCompleted(Me, New ConsultaInformacoesLoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prefeitura.sp.gov.br/nfe/ws/consultaCNPJ", RequestElementName:="ConsultaCNPJRequest", RequestNamespace:="http://www.prefeitura.sp.gov.br/nfe", ResponseNamespace:="http://www.prefeitura.sp.gov.br/nfe", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function ConsultaCNPJ(ByVal VersaoSchema As Integer, ByVal MensagemXML As String) As <System.Xml.Serialization.XmlElementAttribute("RetornoXML")> String
            Dim results() As Object = Me.Invoke("ConsultaCNPJ", New Object() {VersaoSchema, MensagemXML})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginConsultaCNPJ(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsultaCNPJ", New Object() {VersaoSchema, MensagemXML}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndConsultaCNPJ(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ConsultaCNPJAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String)
            Me.ConsultaCNPJAsync(VersaoSchema, MensagemXML, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ConsultaCNPJAsync(ByVal VersaoSchema As Integer, ByVal MensagemXML As String, ByVal userState As Object)
            If (Me.ConsultaCNPJOperationCompleted Is Nothing) Then
                Me.ConsultaCNPJOperationCompleted = AddressOf Me.OnConsultaCNPJOperationCompleted
            End If
            Me.InvokeAsync("ConsultaCNPJ", New Object() {VersaoSchema, MensagemXML}, Me.ConsultaCNPJOperationCompleted, userState)
        End Sub

        Private Sub OnConsultaCNPJOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaCNPJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaCNPJCompleted(Me, New ConsultaCNPJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub EnvioRPSCompletedEventHandler(ByVal sender As Object, ByVal e As EnvioRPSCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class EnvioRPSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub EnvioLoteRPSCompletedEventHandler(ByVal sender As Object, ByVal e As EnvioLoteRPSCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class EnvioLoteRPSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub TesteEnvioLoteRPSCompletedEventHandler(ByVal sender As Object, ByVal e As TesteEnvioLoteRPSCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class TesteEnvioLoteRPSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub CancelamentoNFeCompletedEventHandler(ByVal sender As Object, ByVal e As CancelamentoNFeCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class CancelamentoNFeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub ConsultaNFeCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaNFeCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class ConsultaNFeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub ConsultaNFeRecebidasCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaNFeRecebidasCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class ConsultaNFeRecebidasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub ConsultaNFeEmitidasCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaNFeEmitidasCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class ConsultaNFeEmitidasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub ConsultaLoteCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaLoteCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class ConsultaLoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub ConsultaInformacoesLoteCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaInformacoesLoteCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class ConsultaInformacoesLoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0")>
    Public Delegate Sub ConsultaCNPJCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaCNPJCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.7.2046.0"),
 System.Diagnostics.DebuggerStepThroughAttribute(),
 System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class ConsultaCNPJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
End Namespace
